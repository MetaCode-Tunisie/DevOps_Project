pipeline {
    agent any
    stages {
        stage("Maven Test") {
            steps {
                sh "mvn -version"
            }
        }
        stage("JDK Test") {
            steps {
                sh "java -version"
            }
        }
        stage("Getting Project From Git") {
            steps {
                echo "Pulling"
                // Ajoutez ici l'étape de récupération du projet Git
            }
        }

  stage('SonarQube CodeQuality Check') {
            steps{
                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar'
            }
        }

    stage('Unit Test') {
            steps {
                // Use Maven to run your JUnit tests
                sh 'mvn test'
            }
        }

  stage('Artifact Construction') {
            steps {
                sh 'mvn package'
            }
        }


        stage('Deploy Nexus') {
            steps {
           // Exécute la commande Maven pour déployer l'artefact sur Nexus
               sh 'mvn deploy -DskipTests=true'
           }
        }


stage('Build Docker Image') {
    steps {
        script {
            def customImageName = "my-java-app"
            sh "docker build -t $customImageName -f Dockerfile ."
        }
    }
}


stage('Login to Docker Hub') {
    steps {
        script {
            def dockerUsername = 'ayou1234'
            def dockerPassword = 'AyouDocker1'
            sh "docker login -u $dockerUsername -p $dockerPassword"
        }
    }
}

stage('Push Docker Image') {
    steps {
        script {
            def dockerUsername = 'ayou1234'
            def dockerImageName = 'my-java-app'
            sh "docker tag $dockerImageName:latest $dockerUsername/$dockerImageName:latest"
            sh "docker push $dockerUsername/$dockerImageName:latest"
        }
    }
}


   


   stage('Run Docker Container') {
    steps {
        sh 'docker run -p 8082:8082 my-java-app:latest'
    }
}




    }
} 
